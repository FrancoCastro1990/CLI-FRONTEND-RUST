name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: cli-frontend
            asset_name: cli-frontend-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: cli-frontend.exe
            asset_name: cli-frontend-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: cli-frontend
            asset_name: cli-frontend-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: cli-frontend
            asset_name: cli-frontend-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
        chmod +x ${{ matrix.asset_name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} ${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare installers and binaries
      run: |
        # Create release directory
        mkdir -p release-assets
        
        # Copy binaries to release assets
        cp cli-frontend-linux-x86_64/cli-frontend-linux-x86_64 release-assets/
        cp cli-frontend-windows-x86_64.exe/cli-frontend-windows-x86_64.exe release-assets/
        cp cli-frontend-macos-x86_64/cli-frontend-macos-x86_64 release-assets/
        cp cli-frontend-macos-aarch64/cli-frontend-macos-aarch64 release-assets/
        
        # Make binaries executable
        chmod +x release-assets/cli-frontend-*
        
        # Create platform-specific installers
        
        # Linux/Unix installer with embedded binary
        cat > release-assets/install-linux.sh << 'EOF'
        #!/bin/bash
        # CLI Frontend Generator - Linux Quick Installer
        set -e
        
        # Colors
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        INSTALL_DIR="$HOME/.cli-template"
        BINARY_DIR="$HOME/.local/bin"
        BINARY_NAME="cli-frontend"
        
        echo -e "${BLUE}🚀 CLI Frontend Generator - Linux Installer${NC}"
        echo -e "${BLUE}=============================================${NC}"
        
        # Create directories
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$BINARY_DIR"
        
        # Download binary
        echo -e "${BLUE}⬇️  Downloading binary...${NC}"
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest")
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -o "https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/download/[^\"]*cli-frontend-linux-x86_64[^\"]*" | head -1)
        
        if [ -z "$DOWNLOAD_URL" ]; then
            echo -e "${RED}❌ Could not find download URL${NC}"
            exit 1
        fi
        
        curl -L -o "$BINARY_DIR/$BINARY_NAME" "$DOWNLOAD_URL"
        chmod +x "$BINARY_DIR/$BINARY_NAME"
        
        # Download templates and architectures
        echo -e "${BLUE}📄 Downloading templates and architectures...${NC}"
        TEMPLATES_URL="https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/archive/main.zip"
        TEMP_DIR=$(mktemp -d)
        curl -L -o "$TEMP_DIR/templates.zip" "$TEMPLATES_URL"
        cd "$TEMP_DIR"
        unzip -q templates.zip
        cp -r "CLI-FRONTEND-RUST-main/templates" "$INSTALL_DIR/"
        cp -r "CLI-FRONTEND-RUST-main/architectures" "$INSTALL_DIR/"
        rm -rf "$TEMP_DIR"
        
        # Add to PATH
        SHELL_CONFIG=""
        if [ -n "$BASH_VERSION" ]; then
            SHELL_CONFIG="$HOME/.bashrc"
        elif [ -n "$ZSH_VERSION" ]; then
            SHELL_CONFIG="$HOME/.zshrc"
        else
            SHELL_CONFIG="$HOME/.profile"
        fi
        
        if ! echo "$PATH" | grep -q "$BINARY_DIR"; then
            echo -e "${BLUE}🔧 Adding to PATH...${NC}"
            echo "" >> "$SHELL_CONFIG"
            echo "# CLI Frontend Generator" >> "$SHELL_CONFIG"
            echo "export PATH=\"\$PATH:$BINARY_DIR\"" >> "$SHELL_CONFIG"
            echo -e "${GREEN}✅ Added to PATH. Please run: source $SHELL_CONFIG${NC}"
        fi
        
        # Create configuration file with absolute paths
        echo -e "${BLUE}⚙️  Creating configuration file...${NC}"
        CONFIG_FILE="$HOME/.cli-frontend.conf"
        
        cat > "$CONFIG_FILE" << EOL
        # CLI Frontend Generator Configuration
        # Global installation configuration
        
        # General settings
        default_type=component
        create_folder=true
        enable_hooks=true
        
        # Paths configuration (using absolute paths)
        templates_dir=$HOME/.cli-template/templates
        output_dir=.
        architectures_dir=$HOME/.cli-template/architectures
        
        # Feature settings
        default_architecture=screaming-architecture
        EOL
        
        echo -e "${GREEN}✅ Configuration file created at: $CONFIG_FILE${NC}"
        
        echo -e "${GREEN}🎉 Installation completed successfully!${NC}"
        echo -e "${BLUE}📍 Binary: $BINARY_DIR/$BINARY_NAME${NC}"
        echo -e "${BLUE}📄 Templates: $INSTALL_DIR/templates${NC}"
        echo -e "${BLUE}🏗️  Architectures: $INSTALL_DIR/architectures${NC}"
        echo -e "${BLUE}⚙️  Configuration: $CONFIG_FILE${NC}"
        echo -e "${YELLOW}Usage: cli-frontend MyComponent --type component${NC}"
        echo -e "${YELLOW}Feature: cli-frontend UserAuth --type feature --architecture mvc${NC}"
        EOF
        
        # macOS installer
        cat > release-assets/install-macos.sh << 'EOF'
        #!/bin/bash
        # CLI Frontend Generator - macOS Quick Installer
        set -e
        
        # Colors
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        NC='\033[0m'
        
        INSTALL_DIR="$HOME/.cli-template"
        BINARY_DIR="$HOME/.local/bin"
        BINARY_NAME="cli-frontend"
        
        echo -e "${BLUE}🚀 CLI Frontend Generator - macOS Installer${NC}"
        echo -e "${BLUE}============================================${NC}"
        
        # Detect architecture
        ARCH=$(uname -m)
        if [ "$ARCH" = "arm64" ]; then
            ASSET_NAME="cli-frontend-macos-aarch64"
        else
            ASSET_NAME="cli-frontend-macos-x86_64"
        fi
        
        echo -e "${BLUE}🔍 Detected architecture: $ARCH${NC}"
        
        # Create directories
        mkdir -p "$INSTALL_DIR"
        mkdir -p "$BINARY_DIR"
        
        # Download binary
        echo -e "${BLUE}⬇️  Downloading binary...${NC}"
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest")
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | grep -o "https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/download/[^\"]*$ASSET_NAME[^\"]*" | head -1)
        
        if [ -z "$DOWNLOAD_URL" ]; then
            echo -e "${RED}❌ Could not find download URL for $ASSET_NAME${NC}"
            exit 1
        fi
        
        curl -L -o "$BINARY_DIR/$BINARY_NAME" "$DOWNLOAD_URL"
        chmod +x "$BINARY_DIR/$BINARY_NAME"
        
        # Download templates and architectures
        echo -e "${BLUE}📄 Downloading templates and architectures...${NC}"
        TEMPLATES_URL="https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/archive/main.zip"
        TEMP_DIR=$(mktemp -d)
        curl -L -o "$TEMP_DIR/templates.zip" "$TEMPLATES_URL"
        cd "$TEMP_DIR"
        unzip -q templates.zip
        cp -r "CLI-FRONTEND-RUST-main/templates" "$INSTALL_DIR/"
        cp -r "CLI-FRONTEND-RUST-main/architectures" "$INSTALL_DIR/"
        rm -rf "$TEMP_DIR"
        
        # Add to PATH
        SHELL_CONFIG=""
        if [ -n "$ZSH_VERSION" ] || [ "$SHELL" = "/bin/zsh" ]; then
            SHELL_CONFIG="$HOME/.zshrc"
        elif [ -n "$BASH_VERSION" ] || [ "$SHELL" = "/bin/bash" ]; then
            SHELL_CONFIG="$HOME/.bash_profile"
        else
            SHELL_CONFIG="$HOME/.profile"
        fi
        
        if ! echo "$PATH" | grep -q "$BINARY_DIR"; then
            echo -e "${BLUE}🔧 Adding to PATH...${NC}"
            echo "" >> "$SHELL_CONFIG"
            echo "# CLI Frontend Generator" >> "$SHELL_CONFIG"
            echo "export PATH=\"\$PATH:$BINARY_DIR\"" >> "$SHELL_CONFIG"
            echo -e "${GREEN}✅ Added to PATH. Please run: source $SHELL_CONFIG${NC}"
        fi
        
        # Create configuration file with absolute paths
        echo -e "${BLUE}⚙️  Creating configuration file...${NC}"
        CONFIG_FILE="$HOME/.cli-frontend.conf"
        
        cat > "$CONFIG_FILE" << EOL
        # CLI Frontend Generator Configuration
        # Global installation configuration
        
        # General settings
        default_type=component
        create_folder=true
        enable_hooks=true
        
        # Paths configuration (using absolute paths)
        templates_dir=$HOME/.cli-template/templates
        output_dir=.
        architectures_dir=$HOME/.cli-template/architectures
        
        # Feature settings
        default_architecture=screaming-architecture
        EOL
        
        echo -e "${GREEN}✅ Configuration file created at: $CONFIG_FILE${NC}"
        
        echo -e "${GREEN}🎉 Installation completed successfully!${NC}"
        echo -e "${BLUE}📍 Binary: $BINARY_DIR/$BINARY_NAME${NC}"
        echo -e "${BLUE}📄 Templates: $INSTALL_DIR/templates${NC}"
        echo -e "${BLUE}🏗️  Architectures: $INSTALL_DIR/architectures${NC}"
        echo -e "${BLUE}⚙️  Configuration: $CONFIG_FILE${NC}"
        echo -e "${YELLOW}Usage: cli-frontend MyComponent --type component${NC}"
        echo -e "${YELLOW}Feature: cli-frontend UserAuth --type feature --architecture mvc${NC}"
        EOF
        
        # Windows PowerShell installer
        cat > release-assets/install-windows.ps1 << 'EOF'
        # CLI Frontend Generator - Windows Quick Installer
        param(
            [string]$InstallPath = "$env:USERPROFILE\.cli-template"
        )
        
        # Color functions
        function Write-ColorOutput($ForegroundColor) {
            $fc = $host.UI.RawUI.ForegroundColor
            $host.UI.RawUI.ForegroundColor = $ForegroundColor
            if ($args) {
                Write-Output $args
            } else {
                $input | Write-Output
            }
            $host.UI.RawUI.ForegroundColor = $fc
        }
        
        $Green = [System.ConsoleColor]::Green
        $Red = [System.ConsoleColor]::Red
        $Yellow = [System.ConsoleColor]::Yellow
        $Blue = [System.ConsoleColor]::Cyan
        
        Write-ColorOutput $Blue "🚀 CLI Frontend Generator - Windows Installer"
        Write-ColorOutput $Blue "=============================================="
        
        # Create directories
        Write-ColorOutput $Blue "📁 Creating installation directory..."
        if (-not (Test-Path $InstallPath)) {
            New-Item -ItemType Directory -Path $InstallPath -Force | Out-Null
        }
        
        # Download binary
        Write-ColorOutput $Blue "⬇️  Downloading binary..."
        try {
            $LatestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest"
            $DownloadUrl = $null
            foreach ($asset in $LatestRelease.assets) {
                if ($asset.name -eq "cli-frontend-windows-x86_64.exe") {
                    $DownloadUrl = $asset.browser_download_url
                    break
                }
            }
            
            if (-not $DownloadUrl) {
                Write-ColorOutput $Red "❌ Could not find Windows binary in latest release"
                exit 1
            }
            
            $BinaryPath = Join-Path $InstallPath "cli-frontend.exe"
            Invoke-WebRequest -Uri $DownloadUrl -OutFile $BinaryPath -UseBasicParsing
            Write-ColorOutput $Green "✅ Binary downloaded successfully"
        } catch {
            Write-ColorOutput $Red "❌ Failed to download binary: $($_.Exception.Message)"
            exit 1
        }
        
        # Download templates and architectures
        Write-ColorOutput $Blue "📄 Downloading templates and architectures..."
        try {
            $TemplatesUrl = "https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/archive/main.zip"
            $TempDir = [System.IO.Path]::GetTempPath()
            $ZipPath = Join-Path $TempDir "templates.zip"
            
            Invoke-WebRequest -Uri $TemplatesUrl -OutFile $ZipPath -UseBasicParsing
            
            $ExtractPath = Join-Path $TempDir "cli-frontend-temp"
            if (Test-Path $ExtractPath) {
                Remove-Item $ExtractPath -Recurse -Force
            }
            
            Expand-Archive -Path $ZipPath -DestinationPath $ExtractPath -Force
            
            $SourceTemplatesPath = Join-Path $ExtractPath "CLI-FRONTEND-RUST-main\templates"
            $DestTemplatesPath = Join-Path $InstallPath "templates"
            
            $SourceArchitecturesPath = Join-Path $ExtractPath "CLI-FRONTEND-RUST-main\architectures"
            $DestArchitecturesPath = Join-Path $InstallPath "architectures"
            
            if (Test-Path $DestTemplatesPath) {
                Remove-Item $DestTemplatesPath -Recurse -Force
            }
            
            if (Test-Path $DestArchitecturesPath) {
                Remove-Item $DestArchitecturesPath -Recurse -Force
            }
            
            Copy-Item -Path $SourceTemplatesPath -Destination $DestTemplatesPath -Recurse -Force
            Copy-Item -Path $SourceArchitecturesPath -Destination $DestArchitecturesPath -Recurse -Force
            
            # Cleanup
            Remove-Item $ZipPath -Force -ErrorAction SilentlyContinue
            Remove-Item $ExtractPath -Recurse -Force -ErrorAction SilentlyContinue
            
            Write-ColorOutput $Green "✅ Templates and architectures downloaded successfully"
        } catch {
            Write-ColorOutput $Yellow "⚠️  Failed to download templates and architectures: $($_.Exception.Message)"
        }
        
        # Create configuration file
        Write-ColorOutput $Blue "⚙️  Creating configuration file..."
        $ConfigPath = Join-Path $env:USERPROFILE ".cli-frontend.conf"
        $NormalizedInstallPath = $InstallPath -replace '\\\\', '/'
        
        $ConfigLines = @(
            "# CLI Frontend Generator Configuration",
            "# Auto-generated by installer v1.2.2",
            "",
            "# General settings",
            "default_type=component",
            "create_folder=true", 
            "enable_hooks=true",
            "",
            "# Paths",
            "templates_dir=$NormalizedInstallPath/templates",
            "architectures_dir=$NormalizedInstallPath/architectures", 
            "output_dir=.",
            "",
            "# Features",
            "default_architecture=screaming-architecture"
        )
        
        try {
            $ConfigLines | Out-File -FilePath $ConfigPath -Encoding UTF8 -Force
            Write-ColorOutput $Green "✅ Configuration file created: $ConfigPath"
        } catch {
            Write-ColorOutput $Yellow "⚠️  Could not create configuration file: $($_.Exception.Message)"
        }
        
        # Add to PATH
        $currentPath = [Environment]::GetEnvironmentVariable("PATH", "User")
        if ($currentPath -notlike "*$InstallPath*") {
            Write-ColorOutput $Blue "🔧 Adding to PATH..."
            [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$InstallPath", "User")
            Write-ColorOutput $Green "✅ Added to PATH. Please restart your terminal."
        }
        
        Write-ColorOutput $Green "🎉 Installation completed successfully!"
        Write-ColorOutput $Blue "📍 Binary: $InstallPath\cli-frontend.exe"
        Write-ColorOutput $Blue "📄 Templates: $InstallPath\templates"
        Write-ColorOutput $Blue "🏗️  Architectures: $InstallPath\architectures"
        Write-ColorOutput $Yellow "Usage: cli-frontend MyComponent --type component"
        Write-ColorOutput $Yellow "Feature: cli-frontend UserAuth --type feature --architecture mvc"
        EOF
        
        # Make installers executable
        chmod +x release-assets/install-*.sh
        
        # Create a universal installer
        cat > release-assets/install.sh << 'EOF'
        #!/bin/bash
        # CLI Frontend Generator - Universal Installer
        set -e
        
        OS=""
        case "$(uname -s)" in
            Linux*)     OS="linux";;
            Darwin*)    OS="macos";;
            *)          echo "❌ Unsupported OS: $(uname -s)"; exit 1;;
        esac
        
        echo "🚀 Detected OS: $OS"
        
        if [ "$OS" = "linux" ]; then
            curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-linux.sh | bash
        elif [ "$OS" = "macos" ]; then
            curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-macos.sh | bash
        fi
        EOF
        chmod +x release-assets/install.sh
        
        # Create README for installers
        cat > release-assets/INSTALL_README.md << 'EOF'
        # CLI Frontend Generator - Installation Guide
        
        ## Quick Install (Recommended)
        
        ### Linux/macOS (One-liner):
        ```bash
        curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install.sh | bash
        ```
        
        ### Windows (PowerShell):
        ```powershell
        iwr -useb https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-windows.ps1 | iex
        ```
        
        ## Platform-Specific Installers
        
        ### Linux:
        ```bash
        curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-linux.sh | bash
        ```
        
        ### macOS:
        ```bash
        curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-macos.sh | bash
        ```
        
        ### Windows:
        ```powershell
        iwr -useb https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-windows.ps1 | iex
        ```
        
        ## Manual Installation
        
        1. Download the binary for your platform from the assets below
        2. Place it in your PATH
        3. Download templates and architectures from the repository
        4. Run: `cli-frontend --help`
        
        ## Usage
        
        ### Basic Templates
        ```bash
        # Create a React component
        cli-frontend MyComponent --type component
        
        # Create a custom hook
        cli-frontend useAuth --type hook
        
        # Create a service
        cli-frontend ApiService --type service
        ```
        
        ### Feature Generation with Architectures
        ```bash
        # Create a complete feature with default structure
        cli-frontend UserManagement --type feature
        
        # Create a feature with specific architecture
        cli-frontend UserAuth --type feature --architecture mvc
        cli-frontend Payment --type feature --architecture clean
        cli-frontend Dashboard --type feature --architecture atomic
        ```
        
        ### Available Architectures
        - `mvc` - Model-View-Controller
        - `mvp` - Model-View-Presenter  
        - `mvvm` - Model-View-ViewModel
        - `flux` - Flux Architecture
        - `redux` - Redux Pattern
        - `clean` - Clean Architecture
        - `component` - Component-Based
        - `atomic` - Atomic Design
        - `micro` - Micro-Frontends
        - `event` - Event-Driven
        - `screaming` - Screaming Architecture
        
        See all available templates: `cli-frontend --help`
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/cli-frontend-linux-x86_64
          release-assets/cli-frontend-windows-x86_64.exe
          release-assets/cli-frontend-macos-x86_64
          release-assets/cli-frontend-macos-aarch64
          release-assets/install.sh
          release-assets/install-linux.sh
          release-assets/install-macos.sh
          release-assets/install-windows.ps1
          release-assets/INSTALL_README.md
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 🚀 Quick Install
          
          ### Linux/macOS (One-liner):
          ```bash
          curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install.sh | bash
          ```
          
          ### Windows (PowerShell):
          ```powershell
          iwr -useb https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-windows.ps1 | iex
          ```
          
          ## 🆕 New Features
          - ✅ **Feature Generation**: Create complete folder structures with `--type feature`
          - ✅ **Architecture Support**: Choose from 11 different software architectures
          - ✅ **Smart Naming**: Automatic PascalCase, camelCase, and kebab-case conversions
          - ✅ **Enhanced Templates**: Improved template system with better organization
          
          ## 📦 What's Included
          - ✅ Pre-compiled binaries for Linux, Windows, macOS (Intel & ARM)
          - ✅ Automatic installers for all platforms
          - ✅ Template library with React components, hooks, services, and more
          - ✅ 11 configurable software architecture patterns
          - ✅ Smart naming conventions and file generation
          
          ## 🎯 Usage Examples
          
          ### Basic Templates
          ```bash
          cli-frontend MyComponent --type component
          cli-frontend useAuth --type hook  
          cli-frontend ApiService --type service
          ```
          
          ### Feature Generation
          ```bash
          # Create a complete feature with default structure
          cli-frontend UserManagement --type feature
          
          # Create with specific architecture
          cli-frontend UserAuth --type feature --architecture mvc
          cli-frontend Payment --type feature --architecture clean
          cli-frontend Dashboard --type feature --architecture atomic
          ```
          
          ### Available Architectures
          - `mvc`, `mvp`, `mvvm` - Traditional patterns
          - `flux`, `redux` - State management patterns
          - `clean`, `component`, `atomic` - Modern architectures
          - `micro`, `event`, `screaming` - Advanced patterns
          
          ## 📋 Platform Support
          - ✅ Linux x86_64
          - ✅ Windows x86_64  
          - ✅ macOS Intel (x86_64)
          - ✅ macOS Apple Silicon (ARM64)
          
          See `INSTALL_README.md` for detailed installation instructions and architecture documentation.