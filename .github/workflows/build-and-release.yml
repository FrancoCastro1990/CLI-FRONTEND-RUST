name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggers only on version tags like v1.0.0

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: cli-frontend
            asset_name: cli-frontend-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: cli-frontend.exe
            asset_name: cli-frontend-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: cli-frontend
            asset_name: cli-frontend-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: cli-frontend
            asset_name: cli-frontend-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
        chmod +x ${{ matrix.asset_name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} ${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare installers and binaries
      run: |
        # Create release directory
        mkdir -p release-assets
        
        # Copy binaries to release assets
        cp cli-frontend-linux-x86_64/cli-frontend-linux-x86_64 release-assets/
        cp cli-frontend-windows-x86_64.exe/cli-frontend-windows-x86_64.exe release-assets/
        cp cli-frontend-macos-x86_64/cli-frontend-macos-x86_64 release-assets/
        cp cli-frontend-macos-aarch64/cli-frontend-macos-aarch64 release-assets/
        
        # Make binaries executable
        chmod +x release-assets/cli-frontend-*
        
        # Generate checksums for security
        cd release-assets
        sha256sum cli-frontend-* > checksums.txt
        cd ..
        
        # Generate installers using the centralized script
        chmod +x .github/scripts/generate-installers.sh
        .github/scripts/generate-installers.sh release-assets

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/cli-frontend-linux-x86_64
          release-assets/cli-frontend-windows-x86_64.exe
          release-assets/cli-frontend-macos-x86_64
          release-assets/cli-frontend-macos-aarch64
          release-assets/checksums.txt
          release-assets/install.sh
          release-assets/install-linux.sh
          release-assets/install-macos.sh
          release-assets/install-windows.ps1
          release-assets/INSTALL_README.md
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 🚀 Quick Install
          
          ### Linux/macOS (One-liner):
          ```bash
          curl -sSL https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install.sh | bash
          ```
          
          ### Windows (PowerShell):
          ```powershell
          iwr -useb https://github.com/FrancoCastro1990/CLI-FRONTEND-RUST/releases/latest/download/install-windows.ps1 | iex
          ```

          ## 🔐 Security
          
          All binaries include SHA256 checksums in `checksums.txt`. Verify your download:
          
          ```bash
          # Linux/macOS
          sha256sum -c checksums.txt
          
          # Windows
          Get-FileHash cli-frontend-windows-x86_64.exe -Algorithm SHA256
          ```
          
          ## 🆕 New Features
          - ✅ **Feature Generation**: Create complete folder structures with `--type feature`
          - ✅ **Architecture Support**: Choose from 11 different software architectures
          - ✅ **Smart Naming**: Automatic PascalCase, camelCase, and kebab-case conversions
          - ✅ **Enhanced Templates**: Improved template system with better organization
          
          ## 📦 What's Included
          - ✅ Pre-compiled binaries for Linux, Windows, macOS (Intel & ARM)
          - ✅ Automatic installers for all platforms
          - ✅ Template library with React components, hooks, services, and more
          - ✅ 11 configurable software architecture patterns
          - ✅ Smart naming conventions and file generation
          
          ## 🎯 Usage Examples
          
          ### Basic Templates
          ```bash
          cli-frontend MyComponent --type component
          cli-frontend useAuth --type hook  
          cli-frontend ApiService --type service
          ```
          
          ### Feature Generation
          ```bash
          # Create a complete feature with default structure
          cli-frontend UserManagement --type feature
          
          # Create with specific architecture
          cli-frontend UserAuth --type feature --architecture mvc
          cli-frontend Payment --type feature --architecture clean
          cli-frontend Dashboard --type feature --architecture atomic
          ```
          
          ### Available Architectures
          - `mvc`, `mvp`, `mvvm` - Traditional patterns
          - `flux`, `redux` - State management patterns
          - `clean`, `component`, `atomic` - Modern architectures
          - `micro`, `event`, `screaming` - Advanced patterns
          
          ## 📋 Platform Support
          - ✅ Linux x86_64
          - ✅ Windows x86_64  
          - ✅ macOS Intel (x86_64)
          - ✅ macOS Apple Silicon (ARM64)
          
          See `INSTALL_README.md` for detailed installation instructions and architecture documentation.