name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: cli-frontend
            asset_name: cli-frontend-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: cli-frontend.exe
            asset_name: cli-frontend-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: cli-frontend
            asset_name: cli-frontend-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: cli-frontend
            asset_name: cli-frontend-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
        chmod +x ${{ matrix.asset_name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} ${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  release:
    name: Create Release
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cli-frontend-linux-x86_64/cli-frontend-linux-x86_64
          cli-frontend-windows-x86_64.exe/cli-frontend-windows-x86_64.exe
          cli-frontend-macos-x86_64/cli-frontend-macos-x86_64
          cli-frontend-macos-aarch64/cli-frontend-macos-aarch64
        generate_release_notes: true
        draft: false
        prerelease: false