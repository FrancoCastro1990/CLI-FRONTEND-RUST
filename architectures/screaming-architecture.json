{
  "name": "Screaming Architecture",
  "description": "Domain-driven organization pattern that structures code by business features rather than technical layers. This architecture makes the business domain immediately apparent from the codebase structure, with each feature encapsulating its complete functionality including UI components, business logic, data access, and types. Promotes high cohesion within features and loose coupling between them, making it ideal for large-scale applications with complex business domains.",
  "benefits": [
    "High business domain visibility and discoverability",
    "Strong feature encapsulation with clear boundaries", 
    "Excellent scalability for large development teams",
    "Simplified onboarding through self-documenting structure",
    "Reduced cognitive load when navigating codebase"
  ],
  "limitations": [
    "Potential code duplication without proper shared module strategy",
    "Requires strict naming conventions and architectural discipline",
    "May introduce complexity for simple applications",
    "Cross-cutting concerns need careful abstraction planning"
  ],
  "structure": [
    {
      "path": "components",
      "template": "component",
      "filename_pattern": "{name}",
      "description": "Primary React component implementing the feature's UI logic"
    },
    {
      "path": "pages",
      "template": "page", 
      "filename_pattern": "{name}Page",
      "description": "Top-level page component serving as feature entry point"
    },
    {
      "path": "hooks",
      "template": "hook",
      "filename_pattern": "use{name}",
      "description": "Custom React hooks encapsulating feature-specific state logic"
    },
    {
      "path": "",
      "template": "types",
      "filename_pattern": "types",
      "description": "TypeScript type definitions and interfaces for the feature domain"
    }
  ]
}