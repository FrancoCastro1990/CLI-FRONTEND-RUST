{
  "name": "MVVM (Model-View-ViewModel)",
  "description": "Data-binding architectural pattern where Views bind declaratively to ViewModels that expose observable data and command interfaces. The ViewModel acts as a binding layer between the View and Model, handling presentation logic and state management. This pattern leverages reactive programming principles, making it ideal for modern frontend frameworks with automatic UI synchronization capabilities.",
  "benefits": [
    "Seamless two-way data binding with automatic UI synchronization",
    "Optimal integration with reactive frameworks like React and Vue",
    "Clear separation of presentation logic from UI rendering concerns",
    "Enhanced testability through ViewModel unit testing capabilities",
    "Reduced boilerplate code for state management and UI updates"
  ],
  "limitations": [
    "Risk of implicit dependencies through excessive data binding coupling",
    "Complex debugging scenarios with reactive data flow chains",
    "Potential memory leaks from improper observable cleanup",
    "Learning curve for developers unfamiliar with reactive programming"
  ],
  "structure": [
    {
      "path": "models",
      "template": "service",
      "filename_pattern": "{name}Model",
      "description": "Business data model containing domain entities and validation logic"
    },
    {
      "path": "views",
      "template": "component", 
      "filename_pattern": "{name}View",
      "description": "React component with declarative data binding to ViewModel"
    },
    {
      "path": "viewmodels",
      "template": "service",
      "filename_pattern": "{name}ViewModel",
      "description": "Observable state container exposing data and command interfaces"
    },
    {
      "path": "hooks",
      "template": "hook",
      "filename_pattern": "use{name}",
      "description": "Custom React hook managing ViewModel binding and lifecycle"
    },
    {
      "path": "",
      "template": "types",
      "filename_pattern": "types",
      "description": "TypeScript interfaces for data binding contracts and observables"
    }
  ]
}